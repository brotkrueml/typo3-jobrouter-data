.. include:: _includes.txt

.. _developer:

================
Developer Corner
================

Target group: **Developers**


Retrieve Data Sets From The Different Table Link Types
======================================================

.. _developer-simple-sync-table:

Simple Synchronisation Table
----------------------------

When a JobData table is synchronised with the :ref:`Simple synchronisation
<usage-create-table-link-simple>` type, the data sets are stored in a table
provided by this extension. This is the simplest type, as no programming
knowledge is required. The data sets are stored JSON encoded in a provided table
and can be displayed on the website with a :ref:`plugin <editor-plugin>`.

However, you can also retrieve the data sets independently.


Schema Of The Table `tx_jobrouterdata_domain_model_dataset`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

========= ======================================================================
Column    Description
========= ======================================================================
uid       TYPO3-specific column: unique id of the data set (auto increment)
--------- ----------------------------------------------------------------------
pid       TYPO3-specific column: parent id of the data set (always 0)
--------- ----------------------------------------------------------------------
table_uid Relation to a defined table link
--------- ----------------------------------------------------------------------
jrid      jrid of the Jobdata table data set
--------- ----------------------------------------------------------------------
dataset   JSON-encoded data set with the synchronised JobData table row
========= ======================================================================


Get The Data Sets Of A Table Link Programmatically
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There is an Extbase repository and a domain model available which you can use
in a TYPO3 context:

::

   <?php
   use Brotkrueml\JobRouterData\Domain\Repository\DatasetRepository;
   use TYPO3\CMS\Core\Utility\GeneralUtility;
   use TYPO3\CMS\Extbase\Object\ObjectManager;

   $objectManager = GeneralUtility::makeInstance(ObjectManager::class);
   $datasetRepository = $objectManager->get(DatasetRepository::class);
   $datasets = $datasetRepository->findByTableUid(1);

   foreach ($datasets as $dataset) {
      // Show the jrid
      var_dump($dataset->getJrid());

      // Show the JSON-encoded data set
      var_dump($dataset->getDataset());

      // Get the content of a column
      var_dump($dataset->getDatasetContentForColumn('TRAINING'));
   }


.. _developer-own-table:

Own Table
---------

Synchronising a JobData table into an :ref:`own table
<usage-create-table-link-own>` has some advantages and disadvantages compared
to the simple synchronisation type described above:


- Flexibility: You can filter the content of a synchronised table with specific
  SQL queries, because all JobData columns are stored in separate columns in the
  TYPO3 table.
- Joining data: You can join the table with other tables in your domain.
- Easy usage: e.g. in TCA select boxes against the simple synchronisation.
- More Work: You have to program the logic yourself.

But let's start:

#. Create a new extension or use an existing one. Consult the TYPO3 manual how
   to do this.

#. Add or append the table definition to the file :file:`ext_tables.php`:

   .. code-block:: sql

      CREATE TABLE tx_acmejobs_domain_model_jobs (
         jrid int(11) unsigned DEFAULT '0' NOT NULL,
         position varchar(255)  DEFAULT '' NOT NULL,
         active smallint(5) unsigned DEFAULT '0' NOT NULL,

         UNIQUE KEY jrid (jrid)
      );

   The table name must start with `tx_` to be recognised as an own table in the
   module.

   It must also have a column `jrid`. Add a unique or primary key for the `jrid`
   column. If you want to use the table in a TCA/Extbase context, you must
   create a unique key, because the primary key is implicitly generated by TYPO3
   for the uid.

   Add the columns to be synchronised from the JobData table. The column type
   should be the same as in the JobData table.

#. Go to the :guilabel:`Admin Tools` > :guilabel:`Maintenance` module, click on
   the :guilabel:`Analyse database` button and create the table.

#. Add a table link in the :ref:`module <usage-create-table-link-own>`.

This is the minimal setup to synchronise a JobData table into an own TYPO3
table. How you will use the table depends on your use case.


Other Usage
-----------

Links to JobData tables are also centralised in the Data module, in contrast to the definition in PHP code.

The table link type :ref:`Other usage <usage-create-table-link-other>` can be
used to facilitate the access a JobData table. Links to JobData tables are
also centralised in the :guilabel:`Data` module, in contrast to the definition
in PHP code.

Here is an example to get the table link and initialise the JobRouter Client:

::

   <?php
   use Brotkrueml\JobRouterConnector\RestClient\RestClientFactory;
   use Brotkrueml\JobRouterData\Domain\Repository\TableRepository;
   use TYPO3\CMS\Core\Utility\GeneralUtility;
   use TYPO3\CMS\Extbase\Object\ObjectManager;

   $objectManager = GeneralUtility::makeInstance(ObjectManager::class);
   $tableRepository = $objectManager->get(TableRepository::class);

   // Get the table with uid 3
   $table = $tableRepository->findByIdentifier(3);

   $connection = $table->getConnection();
   if ($connection) {
      // Create a JobRouter Client RestClient object
      $client = (new RestClientFactory())->create($connection);
      $response = $restClient->request(
         'GET',
         \sprintf('application/jobdata/tables/%s/datasets', $table->getTableGuid())
      );

      // Do something with the response ...
   }

Have a look into the :doc:`JobRouter Client <client:introduction>` documentation
how to use it. The library eases the access to the JobRouter REST API.
